
2) 반복문 외부처리

발견처리

===============================
초기화
while 범위조건:
    if 발견조건: # 내부처리
        성공처리
        break
    증감

if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while 범위조건:
    if 발견조건:
        break
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while True:
    if not(범위조건):
        break
    if 발견조건:
        break
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while True:
    if not(범위조건) or 발견조건:
        break
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while True:
    if not(범위조건 and not(발견조건)):
        break
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while True:
    if not(범위조건 and not(발견조건)):
        break
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------
초기화
while 범위조건 and not(발견조건):
    증감

if 범위조건: # 외부처리
    성공처리
if not(범위조건): # 외부처리
    실패처리
-------------------------------


=====================================
def find(beg, end):
    i=beg
    while i<=end and not(i%5==0):
        i=i+1
    return i

beg = input('beg >> ')
end = input('end >> ')

i=find(beg,end)

if i<=end:
    print 'found:', i
else:
    print 'not found'
-------------------------------------
def find(beg, end):
    i=beg
    while i<=end:
        if i%5==0:
            break
        i=i+1
    return i

beg = input('beg >> ')
end = input('end >> ')

i=find(beg,end)

if i<=end:
    print 'found:', i
else:
    print 'not found'
-------------------------------------
def find(beg, end):
    i=beg
    while i<=end:
        if i%5==0:
            return i
        i=i+1
    return i

beg = input('beg >> ')
end = input('end >> ')

i=find(beg,end)

if i<=end:
    print 'found:', i
else:
    print 'not found'
-------------------------------------


=====================================
def f(...):
    초기화
    while 범위조건 and not(발견조건):
        증감
    return 수식
-------------------------------------
def f(...):
    초기화
    while 범위조건:
        if 발견조건:
             break
        증감
    return 수식
-------------------------------------
def f(...):
    초기화
    while 범위조건:
        if 발견조건:
             return 수식
        증감
    return 수식
-------------------------------------

=====================================
# prime
# all x in [2,n), n%x!=0

def find(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return x

n = input('integer >> ')

x = find(n)
if x<n:
    print 'divisor:', x
else:
    print 'not found'
-------------------------------------
# prime
# all x in [2,n), n%x!=0

def find(n):
    x=2
    while x<n:
        if n%x==0:
            break
        x=x+1
    return x

n = input('integer >> ')

x = find(n)
if x<n:
    print 'divisor:', x
else:
    print 'not found'
-------------------------------------
# prime
# all x in [2,n), n%x!=0

def find(n):
    x=2
    while x<n:
        if n%x==0:
            return x
        x=x+1
    return x

n = input('integer >> ')

x = find(n)
if x<n:
    print 'divisor:', x
else:
    print 'not found'
-------------------------------------
# prime
# all x in [2,n), n%x!=0

def find(n):
    x=2
    while x<n:
        if n%x==0:
            return x
        x=x+1
    return x

n = input('integer >> ')

if find(n)<n:
    print 'divisor:', x
else:
    print 'not found'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def find(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return x

n = input('integer >> ')

if n>1 and not(find(n)<n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def find(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if find(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            break
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return n>1 and not(x<n)
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return n>1 and not(True)
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return False
        x=x+1
    return n>1 and not(x<n)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return False
        x=x+1
    return n>1 and not(False)

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return False
        x=x+1
    return n>1

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n:
        if n%x==0:
            return False
        x=x+1
    return n>1

n = input('integer >> ')

if is_prime(n):
    print 'prime'
else:
    print 'not prime'
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=beg
while n<=end:
    if is_prime(n):
        print n,
    n=n+1
print
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

beg = input('beg >> ')
end = input('end >> ')

n=beg
while n<=end:
    x=2
    while x<n and not(n%x==0):
        x=x+1
    if n>1 and not(x<n):
        print n,
    n=n+1
print
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

beg = input('beg >> ')
end = input('end >> ')

s=0
n=beg
while n<=end:
    x=2
    while x<n and not(n%x==0):
        x=x+1
    if n>1 and not(x<n):
        print n,
        s=s+n
    n=n+1
print
print 'sum =', s
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

beg = input('beg >> ')
end = input('end >> ')

s=0
n=beg
while n<=end:
    x=2
    while x<n and not(n%x==0):
        x=x+1
    if n>1 and not(x<n):
        if s>0:
            print '+',
        print n,
        s=s+n
    n=n+1
print '=', s
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=beg
while n<=end:
    if is_prime(n):
        print 'min prime:', n
        break
    n=n+1
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=beg
while n<=end:
    if is_prime(n):
        break
    n=n+1
    
if n<=end:
    print 'min prime:', n
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=beg
while n<=end and not(is_prime(n)):
    n=n+1
    
if n<=end:
    print 'min prime:', n
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=end
while n>=beg:
    if is_prime(n):
        print 'max prime:', n
        break
    n=n-1
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=end
while n>=beg:
    if is_prime(n):
        break
    n=n-1
    
if n>=beg:
    print 'max prime:', n
-------------------------------------
# prime
# all x in [2,n), n%x!=0, (n>1)

def is_prime(n):
    x=2
    while x<n and not(n%x==0):
        x=x+1
    return n>1 and not(x<n)

beg = input('beg >> ')
end = input('end >> ')

n=end
while n>=beg and not(is_prime(n)):
    n=n-1
    
if n>=beg:
    print 'max prime:', n
-------------------------------------
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* 4진법 5자리 수의 다음 수 구하기
=====================================
ls = [3, 2, 1, 3, 3]

print ls

i=0
while i<len(ls):
    if ls[i]==3:
        ls[i]=0
    i=i+1

print ls
-------------------------------------
ls = [3, 2, 1, 3, 3]

print ls

i=len(ls)-1
while i>=0:
    if ls[i]==3:
        ls[i]=0
    i=i-1

print ls
-------------------------------------
ls = [3, 2, 1, 3, 3]

print ls

i=len(ls)-1
while i>=0:
    if ls[i]!=3:
        break
    if ls[i]==3:
        ls[i]=0
    i=i-1

print ls
-------------------------------------
ls = [3, 2, 1, 3, 3]

print ls

i=len(ls)-1
while i>=0:
    if ls[i]!=3:
        ls[i]=ls[i]+1
        break
    if ls[i]==3:
        ls[i]=0
    i=i-1

print ls
-------------------------------------
# 4, 5
# [2, 3, 3, 3, 3]
# [3, 0, 0, 0, 0]

# [3, 3, 3, 3, 3]
# [0, 0, 0, 0, 0]

# good example
# [3, 2, 1, 3, 3]
# [3, 2, 2, 0, 0]

# back --> front
# ls[i]==3: ls[i]-->0, repeat
# ls[i]!=3: increase ls[i], break

ls = [3, 2, 1, 3, 3]

print ls

i=len(ls)-1
while i>=0:
    if ls[i]!=3:
        ls[i]=ls[i]+1
        break
    if ls[i]==3:
        ls[i]=0
    i=i-1

print ls
-------------------------------------
# 4, 5
# [2, 3, 3, 3, 3]
# [3, 0, 0, 0, 0]

# [3, 3, 3, 3, 3]
# [0, 0, 0, 0, 0]

# good example
# [3, 2, 1, 3, 3]
# [3, 2, 2, 0, 0]

# back --> front
# ls[i]==3: ls[i]-->0, repeat
# ls[i]!=3: increase ls[i], break

ls = [0]*5

n=4**5
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0:
        if ls[i]!=3:
            ls[i]=ls[i]+1
            break
        if ls[i]==3:
            ls[i]=0
        i=i-1

    j=j+1
-------------------------------------
# 10, 3
# good example
# [5, 9, 9]
# [6, 0, 0]

# back --> front
# ls[i]==9: ls[i]-->0, repeat
# ls[i]!=9: increase ls[i], break

ls = [0]*3

n=10**3
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0:
        if ls[i]!=9:
            ls[i]=ls[i]+1
            break
        if ls[i]==9:
            ls[i]=0
        i=i-1

    j=j+1
-------------------------------------
# k, sz

# back --> front
# ls[i]==k-1: ls[i]-->0, repeat
# ls[i]!=k-1: increase ls[i], break

k=10
sz=3

ls = [0]*sz
n=k**sz
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0:
        if ls[i]!=k-1:
            ls[i]=ls[i]+1
            break
        if ls[i]==k-1:
            ls[i]=0
        i=i-1

    j=j+1
-------------------------------------
# k, sz

# back --> front
# ls[i]==k-1: ls[i]-->0, repeat
# ls[i]!=k-1: increase ls[i], break

k=10
sz=3

ls = [0]*sz
n=k**sz
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0:
        if ls[i]!=k-1:
            break
        if ls[i]==k-1:
            ls[i]=0
        i=i-1
    if i>=0:
        ls[i]=ls[i]+1

    j=j+1
-------------------------------------
# k, sz

# back --> front
# ls[i]==k-1: ls[i]-->0, repeat
# ls[i]!=k-1: increase ls[i], break

k=10
sz=3

ls = [0]*sz
n=k**sz
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0 and not(ls[i]!=k-1):
        if ls[i]==k-1:
            ls[i]=0
        i=i-1
    if i>=0:
        ls[i]=ls[i]+1

    j=j+1
-------------------------------------
# k, sz

# back --> front
# ls[i]==k-1: ls[i]-->0, repeat
# ls[i]!=k-1: increase ls[i], break

k=10
sz=3

ls = [0]*sz
n=k**sz
j=0
while j<n:
    print ls
    i=len(ls)-1
    while i>=0 and not(ls[i]!=k-1):
        ls[i]=0
        i=i-1
    if i>=0:
        ls[i]=ls[i]+1

    j=j+1
-------------------------------------
# k, sz

# back --> front
# ls[i]==k-1: ls[i]-->0, repeat
# ls[i]!=k-1: increase ls[i], break

def next(ls,k):
    i=len(ls)-1
    while i>=0 and not(ls[i]!=k-1):
        ls[i]=0
        i=i-1
    if i>=0:
        ls[i]=ls[i]+1
    return

k=10
sz=3

ls = [0]*sz
n=k**sz
j=0
while j<n:
    print ls
    next(ls,k)
    j=j+1
-------------------------------------
# 4, 5
# [3, 2, 2, 0, 0]
# [3, 2, 1, 3, 3]

# back-->front
# ls[i]==0: ls[i]-->3, repeat
# ls[i]!=0: decrease ls[i], break

# k, sz
# back --> front
# ls[i]==0: ls[i]-->k-1, repeat
# ls[i]!=0: decrease ls[i], break

def next(ls,k):
    i=len(ls)-1
    while i>=0 and not(ls[i]!=0):
        ls[i]=k-1
        i=i-1
    if i>=0:
        ls[i]=ls[i]-1
    return

k=4
sz=5

ls = [k-1]*sz
n=k**sz
j=0
while j<n:
    print ls
    next(ls,k)
    j=j+1
-------------------------------------

* 바람직한 반환값
=====================================
def f(n):
    if n%2==0:
        return 'two'
    if n%3==0:
        return 'three'
    if n%5==0:
        return 'five'
    # return None --> not desirable

v = input('integer >> ')
print f(v)
-------------------------------------
def f(n):
    if n%2==0:
        return 'two'
    if n%3==0:
        return 'three'
    if n%5==0:
        return 'five'
    return 'other' # desirable

v = input('integer >> ')
print f(v)
-------------------------------------
def f(n):
    if n%2==0:
        return 'two'
    if n%3==0:
        return 'three'
    if n%2!=0 and n%3!=0: # oops
        return 'other' 
    # return None

v = input('integer >> ')
print f(v)
-------------------------------------
def f(n):
    if n%2==0:
        return 'two'
    if n%3==0:
        return 'three'
    return 'other' # good
    # return None

v = input('integer >> ')
print f(v)
-------------------------------------
def f(n):
    if n%2==0:
        return 'two'
    if n%3==0:
        return 'three'
    else:
        return 'other' # not bad
    # return None

v = input('integer >> ')
print f(v)
-------------------------------------

* 재귀호출(recursive call, recursion)
- 정의: 함수의 자신에 대한 호출

=====================================
def f(n):
    if n==0:
        return 1
    return n * f(n-1) # calls itself

v = input('integer >> ')
print f(v)
-------------------------------------


* 점화식을 사용한 재귀호출 --> easy
=====================================
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)  (정지부)
#      = n*f(n-1), (n>0)  (가속부)

def f(n):
    if n==0:
        return 1
    if n>0:
        return n*f(n-1)

v = input('integer >> ')
print f(v)
-------------------------------------
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)
#      = n*f(n-1), (n>0)

def f(n):
    if n==0:
        return 1
    return n*f(n-1)

v = input('integer >> ')
print f(v)
-------------------------------------
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)
#      = n*f(n-1), (n>0)

def f(n):
    if n==0:
        return 1
    else:
        return n*f(n-1)

v = input('integer >> ')
print f(v)
-------------------------------------

=====================================
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)
#      = n*f(n-1), (n>0)

def f(n):
    if n==0:
        return 1
    return n*f(n-1)

v = input('integer >> ') # v<0 --> RE
print f(v)
-------------------------------------
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)
#      = n*f(n-1), (n>0)

def f(n):
    if n==0:
        return 1
    return n*f(n-1)

v = input('integer >> ')
if v<0: # good idea
    print f(v)
-------------------------------------
# 5! = 5*4*3*2*1
# f(n) = 1,        (n=0)
#      = n*f(n-1), (n>0)

def f(n):
    if n<0: # good idea
        return 0
    if n==0:
        return 1
    return n*f(n-1)

v = input('integer >> ')
print f(v)
-------------------------------------

* 점화식 없는 재귀호출
=====================================
def f(ls,beg,end,v): # [beg,end)
    if not(beg<end):
        return end  # not [beg,end)
    if ls[beg]==v:
        return beg
    return f(ls,beg+1,end,v)
    
#     0   1   2   3   4   5   6 
ls = [66, 11, 22, 55, 77, 33, 44]

v=input('value >> ')
beg=0
end=len(ls)
retv = f(ls,beg,end,v)
if beg<=retv and retv<end:
    print 'found'
else:
    print 'not found'
-------------------------------------
def f(ls,beg,end,v): # [beg,end)
    if not(beg<end):
        return end  # not [beg,end)
    
    m = (beg+end)/2
    if ls[m]==v:
        return m

    # [beg,m)
    retv = f(ls,beg,m,v)
    if beg<=retv and retv<m:
        return retv
    
    # [m+1,end)
    retv = f(ls,m+1,end,v)
    if m+1<=retv and retv<end:
        return retv

    return end
    
#     0   1   2   3   4   5   6 
ls = [66, 11, 22, 55, 77, 33, 44]

v=input('value >> ')
beg=0
end=len(ls)
retv = f(ls,beg,end,v)
if beg<=retv and retv<end:
    print 'found:', retv
else:
    print 'not found'
    